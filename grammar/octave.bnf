{
    parserClass="com.octaveide.parser.OctaveParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Octave"
    psiImplClassSuffix="Impl"
    psiPackage="com.octaveide.psi"
    psiImplPackage="com.octaveide.psi.impl"

    elementTypeHolderClass="com.octaveide.psi.OctaveTypes"
    elementTypeClass="com.octaveide.psi.OctaveElementType"
    tokenTypeClass="com.octaveide.psi.OctaveTokenType"

    psiImplUtilClass="com.octaveide.psi.impl.OctavePsiImplUtil"

    tokens = [
        L_PAREN='('
        R_PAREN=')'
        L_BRACE='{'
        R_BRACE='}'

        ASSIGN_PLUS='+='
        ASSIGN_MINUS='-='
        ASSIGN_MULTIPLY='*='
        ASSIGN_L_DIV='/='
        ASSIGN_R_DIV='\='
        ASSIGN_POW_1='^='
        ASSIGN_ELEMENT_MULTIPLY='.*='
        ASSIGN_ELEMENT_L_DIV='./='
        ASSIGN_ELEMENT_R_DIV='.\='
        ASSIGN_ELEMENT_POW_1='.^='
        ASSIGN_ELEMENT_OR='|='
        ASSIGN_ELEMENT_AND='&='

        PLUS='+'
        MINUS='-'
        L_DIV='/'
        R_DIV='\'
        POW_1='^' // POW_1 and POW_2 are synonymous
        POW_2='**'
        MULTIPLY='*'
        CC_TRANSPOSE="'" // Complex Conjugate transpose
        TRANSPOSE=".'"
        INCREMENT="++"
        DECREMENT="--"

        LESS_THAN_OR_EQUAL="<="
        LESS_THAN="<"
        EQUAL="=="
        GREATER_THAN_OR_EQUAL=">="
        GREATER_THAN=">"
        NOT_EQUAL_1="!=" // NOT_EQUAL_1 and NOT_EQUAL_2 are synonymous
        NOT_EQUAL_2="~="
        ASSIGN='='

        ELEMENT_PLUS='.+'
        ELEMENT_MINUS='.-'
        ELEMENT_L_DIV='./'
        ELEMENT_R_DIV='.\'
        ELEMENT_POW_1='.^'
        ELEMENT_POW_2='.**'
        ELEMENT_MULTIPLY='.*'

        NOT_1="!" // NOT_1 and NOT_2 are synonymous
        NOT_2="~"

        DOT='.'
        COLON=':'
        AND='&&'
        OR='||'
        ELEMENT_AND='&'
        ELEMENT_OR='|'

        SEMICOLON=';'
        COMMA=","
    ]
//    extends("(add|minus)_expr") = binary_expr
    extends(".*expr")=expr
    extends(".*statement")=statement
    consumeTokenMethod(".*_expr|expr")="consumeTokenFast"
}

octaveFile ::= item_*
private item_ ::= !<<eof>> statement
//private keywords ::= end

statement ::= expr_statement
    | func_decl_statement
    | for_loop_statement
    | empty_statement
expr_statement ::= expr (terminator|<<eof>>)
private terminator ::= ';'|CRLF|COMMENT
for_loop_statement ::= for identifier '=' expr terminator statement* (endfor|end)
private  empty_statement ::= terminator
func_decl_statement ::= function (retval '=')? identifier ( '(' arg_list? ')' )? terminator statement* (endfunction|end)
private arg_list ::= identifier (',' identifier)
private retval ::= identifier // complex things may be here
// the root expression rule
expr ::= assign_expr
    | or_expr
    | and_expr
    | element_or_expr
    | element_and_expr
    | relational_expr
    | colon_expr
    | add_expr
    | mul_expr
    | unary_expr
    | transpose_exponentiation_group
    | postfix_expr
    | primary_expr

private primary_expr ::= func_call_expr | paren_expr | literal_expr | identifier_expr // todo function call, array indexing, cell indexing and structure element indexing: "() {} ."
private transpose_exponentiation_group ::= transpose_expr | exponent_expr
identifier_expr ::= identifier
literal_expr ::= int | float

func_call_expr ::= identifier '(' param_list? ')'
private param_list ::= expr (',' expr)*

assign_expr ::= expr assign_op expr {
    pin = 2
    rightAssociative = true
}
mul_expr ::= expr mul_op expr
add_expr ::= expr add_op expr
unary_expr ::= unary_op expr
or_expr ::= expr '||' expr
and_expr ::= expr '&&' expr
element_or_expr ::= expr '|' expr
element_and_expr ::= expr '&' expr
relational_expr ::= expr relational_op expr
colon_expr ::= expr ':' expr
transpose_expr ::= expr transpose_op
exponent_expr ::= expr exponent_op expr
postfix_expr ::= expr postfix_op { rightAssociative = true }
paren_expr ::= '(' expr ')' { pin=1 }

private postfix_op ::= '++' | '--'
private exponent_op ::= '^' | '**' | '.^' | '.**'
private transpose_op ::= "'" | ".'"
private unary_op ::= '+' | '-' | '++' | '--' | '~' | '!'
private add_op ::= '+'|'-'
private mul_op ::= '*' | '/' | '\' | '.\' | '.*' | './'
private assign_op ::= '=' | '+=' | '-=' | '*=' | '/=' | '\=' | '^=' | '.*=' | './=' | '.\=' | '.^=' | '|=' | '&='
private relational_op ::= '<' | '<=' | '==' | '>=' | '>' | '!=' | '~='


//fake binary_expr ::= expr+ {
//    methods=[
//        left="expr[0]"
//        right="expr[1]"
//    ]
//}

