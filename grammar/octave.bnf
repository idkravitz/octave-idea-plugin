{
    parserClass="com.octaveide.parser.OctaveParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Octave"
    psiImplClassSuffix="Impl"
    psiPackage="com.octaveide.psi"
    psiImplPackage="com.octaveide.psi.impl"

    elementTypeHolderClass="com.octaveide.psi.OctaveTypes"
    elementTypeClass="com.octaveide.psi.OctaveElementType"
    tokenTypeClass="com.octaveide.psi.OctaveTokenType"

    psiImplUtilClass="com.octaveide.psi.impl.OctavePsiImplUtil"

    tokens = [
        PLUS='+'
        MINUS='-'
        ASSIGN='='
        MULTIPLY='*'
        DIVIDE='/'
        SEMICOLON=';'
    ]

    extends("(assign|add|mul)_expr") = binary_expr
    extends(".*_expr")=expr
}

octaveFile ::= item_*
private item_ ::= !<<eof>> (statement|CRLF|COMMENT)

statement ::= expr (';'|CRLF|<<eof>>)

expr ::= //assign_expr
    add_expr
    //| mul_expr
    | literal
    | identifier

literal ::= int
    | float

//assign_expr ::= expr '=' expr
add_expr ::= expr add_op expr
//mul_expr ::= expr mul_op expr

fake binary_expr ::= expr+ {
    methods=[
        left="expr[0]"
        right="expr[1]"
    ]
}

private add_op ::= '+'|'-'
//private mul_op ::= '*'|'/'
