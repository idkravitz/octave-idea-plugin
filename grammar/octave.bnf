{
    parserClass="com.octaveide.parser.OctaveParser"
    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="Octave"
    psiImplClassSuffix="Impl"
    psiPackage="com.octaveide.psi"
    psiImplPackage="com.octaveide.psi.impl"

    elementTypeHolderClass="com.octaveide.psi.OctaveTypes"
    elementTypeClass="com.octaveide.psi.OctaveElementType"
    tokenTypeClass="com.octaveide.psi.OctaveTokenType"

    psiImplUtilClass="com.octaveide.psi.impl.OctavePsiImplUtil"

    tokens = [
        PLUS='+'
        MINUS='-'
        ASSIGN='='
        MULTIPLY='*'
        DIVIDE='/'
        SEMICOLON=';'
    ]

//    extends("(add|minus)_expr") = binary_expr
    extends(".*expr")=expr
//    consumeTokenMethod(".*_expr|expr")="consumeTokenFast"
}

octaveFile ::= item_*
private item_ ::= !<<eof>> (statement|CRLF|COMMENT)

statement ::= expr (';'|CRLF|<<eof>>)

// the root expression rule
expr ::= assign_expr
    | add_expr
    | mul_expr
    | unary_expr
    | primary_expr

private primary_expr ::= literal_expr | identifier_expr
identifier_expr ::= identifier
literal_expr ::= int | float

assign_expr ::= expr '=' expr
mul_expr ::= expr mul_op expr
add_expr ::= expr add_op expr
unary_expr ::= unary_op expr

private unary_op ::= '+'|'-'
private add_op ::= '+'|'-'
private mul_op ::= '*'|'/'

//fake binary_expr ::= expr+ {
//    methods=[
//        left="expr[0]"
//        right="expr[1]"
//    ]
//}

